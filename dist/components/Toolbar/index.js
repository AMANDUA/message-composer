"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _toolbar=_interopRequireDefault(require("./toolbar")),_classnames=_interopRequireDefault(require("classnames")),_react=_interopRequireDefault(require("react")),_reactIconsKit=_interopRequireDefault(require("react-icons-kit")),_bold=require("react-icons-kit/feather/bold"),_italic=require("react-icons-kit/feather/italic"),_underline=require("react-icons-kit/feather/underline"),_code=require("react-icons-kit/feather/code");require("./styles.scss");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var ICON_SIZE=14,options={normal:"Normal",h1:"H1",h2:"H2",h3:"H3"},setCurrentHeader=function(a){return a.normal?options.normal:a.h1?options.h1:a.h2?options.h2:a.h3?options.h3:void 0},FormatToolbar=_react["default"].memo(function(a){var b=a.active,c=a.disabled,d=a.emitter,f=function toggle(a){return function(b){b.preventDefault(),d.emit(a)}}("FOCUS"),g=function(a){return function(b){d.emit(a),f(b)}},h=setCurrentHeader(b),i=(0,_classnames["default"])("toolbar-button","bold",{active:b&&b.bold}),j=(0,_classnames["default"])("toolbar-button","italic",{active:b&&b.italic}),k=(0,_classnames["default"])("toolbar-button","underline",{active:b&&b.underline}),l=(0,_classnames["default"])("toolbar-button","code",{active:b&&b.code});return _react["default"].createElement(_toolbar["default"],null,_react["default"].createElement("button",{className:i,disabled:c,onClick:g("toggleBold")},_react["default"].createElement(_reactIconsKit["default"],{size:ICON_SIZE,icon:_bold.bold})),_react["default"].createElement("button",{className:j,disabled:c,onClick:g("toggleItalic")},_react["default"].createElement(_reactIconsKit["default"],{size:ICON_SIZE,icon:_italic.italic})),_react["default"].createElement("button",{className:k,disabled:c,onClick:g("toggleUnderline")},_react["default"].createElement(_reactIconsKit["default"],{size:ICON_SIZE,icon:_underline.underline})),_react["default"].createElement("button",{className:l,disabled:c,onClick:g("toggleCode")},_react["default"].createElement(_reactIconsKit["default"],{size:ICON_SIZE,icon:_code.code})),_react["default"].createElement("select",{value:h,disabled:c,onChange:function toggleHeader(a){d.emit("toggle".concat(a.target.value)),f(a)}},Object.values(options).map(function(a){return _react["default"].createElement("option",{key:a,value:a},a)})))}),_default=FormatToolbar;exports["default"]=_default;